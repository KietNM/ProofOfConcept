//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProofOfConcept.Web.AccountService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestResponse", Namespace="http://schemas.datacontract.org/2004/07/ProofOfConcept.WcfService.DataContract")]
    [System.SerializableAttribute()]
    public partial class RequestResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessfulField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountNumber {
            get {
                return this.AccountNumberField;
            }
            set {
                if ((this.AccountNumberField.Equals(value) != true)) {
                    this.AccountNumberField = value;
                    this.RaisePropertyChanged("AccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Successful {
            get {
                return this.SuccessfulField;
            }
            set {
                if ((this.SuccessfulField.Equals(value) != true)) {
                    this.SuccessfulField = value;
                    this.RaisePropertyChanged("Successful");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost", ConfigurationName="AccountService.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/IAccountService/GetBalance", ReplyAction="http://localhost/IAccountService/GetBalanceResponse")]
        ProofOfConcept.Web.AccountService.RequestResponse GetBalance(int accountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/IAccountService/GetBalance", ReplyAction="http://localhost/IAccountService/GetBalanceResponse")]
        System.Threading.Tasks.Task<ProofOfConcept.Web.AccountService.RequestResponse> GetBalanceAsync(int accountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/IAccountService/InvokeDeposit", ReplyAction="http://localhost/IAccountService/InvokeDepositResponse")]
        ProofOfConcept.Web.AccountService.RequestResponse InvokeDeposit(int accountNumber, decimal amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/IAccountService/InvokeDeposit", ReplyAction="http://localhost/IAccountService/InvokeDepositResponse")]
        System.Threading.Tasks.Task<ProofOfConcept.Web.AccountService.RequestResponse> InvokeDepositAsync(int accountNumber, decimal amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/IAccountService/InvokeWithdraw", ReplyAction="http://localhost/IAccountService/InvokeWithdrawResponse")]
        ProofOfConcept.Web.AccountService.RequestResponse InvokeWithdraw(int accountNumber, decimal amount, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/IAccountService/InvokeWithdraw", ReplyAction="http://localhost/IAccountService/InvokeWithdrawResponse")]
        System.Threading.Tasks.Task<ProofOfConcept.Web.AccountService.RequestResponse> InvokeWithdrawAsync(int accountNumber, decimal amount, string currency);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : ProofOfConcept.Web.AccountService.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<ProofOfConcept.Web.AccountService.IAccountService>, ProofOfConcept.Web.AccountService.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ProofOfConcept.Web.AccountService.RequestResponse GetBalance(int accountNumber) {
            return base.Channel.GetBalance(accountNumber);
        }
        
        public System.Threading.Tasks.Task<ProofOfConcept.Web.AccountService.RequestResponse> GetBalanceAsync(int accountNumber) {
            return base.Channel.GetBalanceAsync(accountNumber);
        }
        
        public ProofOfConcept.Web.AccountService.RequestResponse InvokeDeposit(int accountNumber, decimal amount, string currency) {
            return base.Channel.InvokeDeposit(accountNumber, amount, currency);
        }
        
        public System.Threading.Tasks.Task<ProofOfConcept.Web.AccountService.RequestResponse> InvokeDepositAsync(int accountNumber, decimal amount, string currency) {
            return base.Channel.InvokeDepositAsync(accountNumber, amount, currency);
        }
        
        public ProofOfConcept.Web.AccountService.RequestResponse InvokeWithdraw(int accountNumber, decimal amount, string currency) {
            return base.Channel.InvokeWithdraw(accountNumber, amount, currency);
        }
        
        public System.Threading.Tasks.Task<ProofOfConcept.Web.AccountService.RequestResponse> InvokeWithdrawAsync(int accountNumber, decimal amount, string currency) {
            return base.Channel.InvokeWithdrawAsync(accountNumber, amount, currency);
        }
    }
}
